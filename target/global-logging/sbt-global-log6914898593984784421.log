[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\lukas\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\lukas\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Amazon.com Inc. Java 1.8.0_265)
[debug]       Load.loadUnit: plugins took 62.1356ms
[debug]       Load.loadUnit: defsScala took 0.200599ms
[debug] [Loading] Scanning directory C:\Users\lukas\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\lukas\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.7611 ms
[debug]           Load.resolveProject(global-plugins) took 30.5853ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\lukas\.sbt\1.0\plugins, plugins: List(<none>))) took 60.0153ms
[debug] [Loading] Done in C:\Users\lukas\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 72.960201ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.161499ms
[debug]     Load.loadUnit(file:/C:/Users/lukas/.sbt/1.0/plugins/, ...) took 139.863599ms
[debug]   Load.apply: load took 244.7278ms
[debug]   Load.apply: resolveProjects took 3.9479ms
[debug]   Load.apply: finalTransforms took 31.377799ms
[debug]   Load.apply: config.delegates took 4.563ms
[debug]   Load.apply: Def.make(settings)... took 401.369601ms
[debug]   Load.apply: structureIndex took 53.6112ms
[debug]   Load.apply: mkStreams took 1.0537ms
[info] loading global plugins from C:\Users\lukas\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1574.055799ms
[debug]           Load.loadUnit: plugins took 13.7343ms
[debug]           Load.loadUnit: defsScala took 0.002199ms
[debug] [Loading] Scanning directory E:\QA-Software\Scala\ims-scala\project
[debug]             Load.loadUnit: mkEval took 4.3957ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\QA-Software\Scala\ims-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3529 ms
[info] loading settings for project ims-scala-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(ims-scala-build) took 2.8557ms
[debug]             Load.loadTransitive: finalizeProject(Project(id ims-scala-build, base: E:\QA-Software\Scala\ims-scala\project, plugins: List(<none>))) took 4.5547ms
[debug] [Loading] Done in E:\QA-Software\Scala\ims-scala\project, returning: (ims-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1206.0519ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.3267ms
[debug]         Load.loadUnit(file:/E:/QA-Software/Scala/ims-scala/project/, ...) took 1222.5818ms
[debug]       Load.apply: load took 1223.1905ms
[debug]       Load.apply: resolveProjects took 0.057801ms
[debug]       Load.apply: finalTransforms took 4.0568ms
[debug]       Load.apply: config.delegates took 0.2179ms
[debug]       Load.apply: Def.make(settings)... took 42.4611ms
[debug]       Load.apply: structureIndex took 15.466801ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from E:\QA-Software\Scala\ims-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1851.9344ms
[debug]     Load.loadUnit: defsScala took 0.0019ms
[debug] [Loading] Scanning directory E:\QA-Software\Scala\ims-scala
[debug]       Load.loadUnit: mkEval took 0.1069ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\QA-Software\Scala\ims-scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 0.9861 ms
[info] loading settings for project ims-scala from build.sbt ...
[debug]         Load.resolveProject(ims-scala) took 16.2374ms
[debug]       Load.loadTransitive: finalizeProject(Project(id ims-scala, base: E:\QA-Software\Scala\ims-scala, plugins: List(<none>))) took 17.8692ms
[debug] [Loading] Done in E:\QA-Software\Scala\ims-scala, returning: (ims-scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 820.7114ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.542001ms
[debug]   Load.loadUnit(file:/E:/QA-Software/Scala/ims-scala/, ...) took 2677.588901ms
[debug] Load.apply: load took 2678.4615ms
[debug] Load.apply: resolveProjects took 0.059ms
[debug] Load.apply: finalTransforms took 13.0003ms
[debug] Load.apply: config.delegates took 0.173901ms
[debug] Load.apply: Def.make(settings)... took 44.991901ms
[debug] Load.apply: structureIndex took 14.3276ms
[debug] Load.apply: mkStreams took 0.0017ms
[info] set current project to ims-scala (in build file:/E:/QA-Software/Scala/ims-scala/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * ims-scala / idePackagePrefix
[warn]   +- E:\QA-Software\Scala\ims-scala\build.sbt:12
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53442 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53442, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ims-scala (in build file:/E:/QA-Software/Scala/ims-scala/)
[debug] > Exec(idea-shell, None, None)
