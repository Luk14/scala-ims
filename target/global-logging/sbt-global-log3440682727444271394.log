[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\lukas\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\lukas\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Amazon.com Inc. Java 1.8.0_265)
[debug]       Load.loadUnit: plugins took 58.727099ms
[debug]       Load.loadUnit: defsScala took 0.2001ms
[debug] [Loading] Scanning directory C:\Users\lukas\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\lukas\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.8896 ms
[debug]           Load.resolveProject(global-plugins) took 29.3025ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\lukas\.sbt\1.0\plugins, plugins: List(<none>))) took 59.437599ms
[debug] [Loading] Done in C:\Users\lukas\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 71.882899ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1558ms
[debug]     Load.loadUnit(file:/C:/Users/lukas/.sbt/1.0/plugins/, ...) took 135.545199ms
[debug]   Load.apply: load took 239.9322ms
[debug]   Load.apply: resolveProjects took 3.634ms
[debug]   Load.apply: finalTransforms took 30.654699ms
[debug]   Load.apply: config.delegates took 4.613ms
[debug]   Load.apply: Def.make(settings)... took 398.754299ms
[debug]   Load.apply: structureIndex took 52.805399ms
[debug]   Load.apply: mkStreams took 1.483ms
[info] loading global plugins from C:\Users\lukas\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1554.3068ms
[debug]           Load.loadUnit: plugins took 13.4156ms
[debug]           Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory E:\QA-Software\Scala\ims-scala\project
[debug]             Load.loadUnit: mkEval took 4.726799ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\QA-Software\Scala\ims-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 0.946601 ms
[info] loading settings for project ims-scala-build from plugins.sbt,idea1.sbt ...
[debug]               Load.resolveProject(ims-scala-build) took 1.416ms
[debug]             Load.loadTransitive: finalizeProject(Project(id ims-scala-build, base: E:\QA-Software\Scala\ims-scala\project, plugins: List(<none>))) took 2.6568ms
[debug] [Loading] Done in E:\QA-Software\Scala\ims-scala\project, returning: (ims-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 91.797ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.6895ms
[debug]         Load.loadUnit(file:/E:/QA-Software/Scala/ims-scala/project/, ...) took 108.4067ms
[debug]       Load.apply: load took 109.107801ms
[debug]       Load.apply: resolveProjects took 0.0859ms
[debug]       Load.apply: finalTransforms took 3.779701ms
[debug]       Load.apply: config.delegates took 0.2186ms
[debug]       Load.apply: Def.make(settings)... took 46.5215ms
[debug]       Load.apply: structureIndex took 14.1511ms
[debug]       Load.apply: mkStreams took 0.001399ms
[info] loading project definition from E:\QA-Software\Scala\ims-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 828.671299ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory E:\QA-Software\Scala\ims-scala
[debug]       Load.loadUnit: mkEval took 0.1094ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\QA-Software\Scala\ims-scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2013 ms
[info] loading settings for project ims-scala from build.sbt ...
[debug]         Load.resolveProject(ims-scala) took 16.399199ms
[debug]       Load.loadTransitive: finalizeProject(Project(id ims-scala, base: E:\QA-Software\Scala\ims-scala, plugins: List(<none>))) took 18.2795ms
[debug] [Loading] Done in E:\QA-Software\Scala\ims-scala, returning: (ims-scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 1116.7535ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.9506ms
[debug]   Load.loadUnit(file:/E:/QA-Software/Scala/ims-scala/, ...) took 1948.8198ms
[debug] Load.apply: load took 1949.9312ms
[debug] Load.apply: resolveProjects took 0.100299ms
[debug] Load.apply: finalTransforms took 13.848899ms
[debug] Load.apply: config.delegates took 0.2364ms
[debug] Load.apply: Def.make(settings)... took 41.191ms
[debug] Load.apply: structureIndex took 11.700901ms
[debug] Load.apply: mkStreams took 0.001799ms
[info] set current project to ims-scala (in build file:/E:/QA-Software/Scala/ims-scala/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * ims-scala / idePackagePrefix
[warn]   +- E:\QA-Software\Scala\ims-scala\build.sbt:7
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51490 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51490, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ims-scala (in build file:/E:/QA-Software/Scala/ims-scala/)
[debug] > Exec(idea-shell, None, None)
